version: 2.1
jobs: 
    lint:
        docker: 
            - image: cimg/python:3.8
        steps:
            - checkout
            - run : 
                name : install dependencies
                command: |
                    pip install pymysql
            - run : 
                name: install linting libraries
                command: |
                    pip install pylint
                    pip install cfn-lint
            - run : 
                name: lint python codes
                command: |
                    pylint --variable-naming-style camelCase LambdaPackageGetCurrentPI/lambda_function.py
                    pylint --variable-naming-style camelCase LambdaPackageUpdateCurrentPI/lambda_function.py
            - run: 
                name: lint cloudformation template
                command: |
                    cfn-lint SQS-LambdaStack.json
    zipPythonPackages:
        docker:
            - image: cimg/base:stable-20.04
        steps:
            - checkout
            - run: 
                name: update packages
                command: |
                    sudo apt-get update
                # sudo apt-get -y upgrade
            - run:
                name: install zip
                command: |
                    zip --version
            - run:
                name: zip packages
                command: |
                    mkdir zip
                    ls -l
                    cd LambdaPackageUpdateCurrentPI
                    zip -r LambdaPackageUpdateCurrentPI-${CIRCLE_WORKFLOW_ID}.zip .
                    cd ../LambdaPackageGetCurrentPI
                    zip -r LambdaPackageGetCurrentPI-${CIRCLE_WORKFLOW_ID}.zip .
                    cd ..
                    cp LambdaPackageUpdateCurrentPI/LambdaPackageUpdateCurrentPI-${CIRCLE_WORKFLOW_ID}.zip ./zip
                    cp LambdaPackageGetCurrentPI/LambdaPackageGetCurrentPI-${CIRCLE_WORKFLOW_ID}.zip ./zip
            - save_cache:
                key: ubuntu-cache
                paths: [zip]
            - persist_to_workspace: 
                root : zip
                paths:
                    - '*'
    uploadZipsToS3:
        docker:
            - image: amazon/aws-cli
        steps:
            - run:
                name: tar gzip
                command: |
                    yum -y install tar gzip
            - attach_workspace: 
                at: .circleci/python_packages
            - run:
                name: upload zip files to s3
                command: |
                    aws s3 cp .circleci/python_packages/LambdaPackageGetCurrentPI-${CIRCLE_WORKFLOW_ID}.zip s3://generalfilesbackfit
                    aws s3 cp .circleci/python_packages/LambdaPackageUpdateCurrentPI-${CIRCLE_WORKFLOW_ID}.zip s3://generalfilesbackfit
    createOrUpdateStack:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: tar gzip
                command: |
                    yum -y install tar gzip
            - run:
                name: update stack
                command: |
                    S3KEYTOSQSENV=LambdaPackageGetCurrentPI-${CIRCLE_WORKFLOW_ID}.zip
                    S3KEYFROMSQSENV=LambdaPackageUpdateCurrentPI-${CIRCLE_WORKFLOW_ID}.zip
                    aws cloudformation deploy --template-file SQS-LambdaStack.json \
                     --stack-name PIBalanceUpdate --capabilities CAPABILITY_NAMED_IAM \
                     --parameter-overrides RDSHOST=${RDS_HOST} RDSDB=${RDS_DB} \
                     RDSUSER=${RDS_USER} RDSPASSWORD=${RDS_PASSWORD} \
                     S3KEYTOSQS=$S3KEYTOSQSENV \
                     S3KEYFROMSQS=$S3KEYFROMSQSENV \
                     VPCID=${VPC_ID}




workflows: 
    launchPiCaseBalanceUpdate: 
        jobs: 
            - lint
            - zipPythonPackages:
                requires: 
                    - lint
            - uploadZipsToS3:
                requires: 
                    - zipPythonPackages
            - createOrUpdateStack:
                requires:   
                    - uploadZipsToS3
